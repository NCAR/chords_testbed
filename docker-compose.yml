version: '3.3'

# The CHORDS configuration (x86) for docker-compose. 
#
# When run with "-p chords", it creates these containers:
#   1. chords_app:       The CHORDS Ruby on Rails server
#   2. chords_mysql:     A MyQSL database for CHORDS metadata.
#   3. chords_influxdb:  An InfluxDB database for real-time time series data.
#   4. chords_nginx:     An nginx reverse-proxy server.
#   5. chords_certbot:   A letsencrypt certificate manager.
#   6. chords_grafana:   A Grafana dashboard server.
#   6. chords_kapacitor: An influxdata kapacitor serve.
#
# This configuration is used to both build the the service images,
# and to deploy the CHORDS system. Dockerfiles provide the recipes
# for the chords image.
#
# To build and deploy the service images:
#   cd <directory containing the CHORDS project>
#   docker-compose -f docker-compose.yml -f docker-compose-build.yml build --no-cache <service>
#   docker push earthcubechords/chords_<service>:<DOCKER_TAG>
#
# To deploy/start/stop CHORDS:
#   curl -L https://github.com/earthcubeprojects-chords/chords/raw/<branch>/docker-compose.yml > docker-compose.yml
#   docker-compose pull
#   python chords_control --config
#   docker-compose -p chords up -d
#   docker-compose -p chords down
#
# To update a running system:
#  docker-compose pull
#  docker-compose -p chords down
#  docker-compose -p chords up -d
# 
# See bin/ssl/SSL.md for instructions on enabling SSL.

services:
  # CHORDS Rails application 
  app:
    container_name: chords_app
    image: earthcubechords/chords:${DOCKER_TAG}
    volumes:
      - mysql-data:/var/lib/mysql
      - shared-tmp:/tmp/
      - rails-log:/chords/log
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - RAILS_ENV=${RAILS_ENV}
      - CHORDS_ADMIN_PW=${CHORDS_ADMIN_PW}
      - CHORDS_GUEST_PW=${CHORDS_GUEST_PW}
      - GRAFANA_ADMIN_PW=${GRAFANA_ADMIN_PW}
      - GRAFANA_HTTP_PORT=${GRAFANA_HTTP_PORT}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - DB_RETENTION=${DB_RETENTION}
      - DOCKER_TAG=${DOCKER_TAG}
      - CHORDS_EMAIL_SERVER=${CHORDS_EMAIL_SERVER}
      - CHORDS_EMAIL_PORT=${CHORDS_EMAIL_PORT}
      - CHORDS_EMAIL_ADDRESS=${CHORDS_EMAIL_ADDRESS}
      - CHORDS_EMAIL_PASSWORD=${CHORDS_EMAIL_PASSWORD}
      - WORKERS=${WORKERS}
      # Note: INFLUXDB_ variables are used by the Influxer gem, meaning that
      # you should NOT create your own variables beginning with INFLUXDB_.
      - INFLUXDB_USERNAME=admin
      - INFLUXDB_PASSWORD=${CHORDS_ADMIN_PW}
      - SSL_ENABLED=${SSL_ENABLED}
      - SSL_HOST=${SSL_HOST}
      - SSL_EMAIL=${SSL_EMAIL}

    command: bash -c "dos2unix ./chords_start.sh && chmod a+x ./chords_start.sh && ./chords_start.sh"
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "5"
    expose:
      - "3042"
    depends_on:
      - mysql
      - influxdb

  # Nginx web server
  nginx:
    container_name: chords_nginx
    image: earthcubechords/chords_nginx:${DOCKER_TAG}
    volumes:
      - nginx-log:/var/log/nginx
      - letsencrypt-etc:/etc/letsencrypt
      - letsencrypt-var-lib:/var/lib/letsencrypt
      - acme-challenge:/acme-challenge
    environment:
      - WORKERS=${WORKERS}
      - SSL_ENABLED=${SSL_ENABLED}
      - SSL_HOST=${SSL_HOST}
      - SSL_EMAIL=${SSL_EMAIL}
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "5"      
    ports:
      - ${CHORDS_HTTP_PORT:-80}:80
      - 443:443
    depends_on:
      - app

  # Certbot SSL certificate handling.
  certbot:
    container_name: chords_certbot
    image: earthcubechords/chords_certbot:${DOCKER_TAG}
    volumes:
      - letsencrypt-log:/var/log/letsencrypt
      - letsencrypt-etc:/etc/letsencrypt
      - letsencrypt-var-lib:/var/lib/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
      - acme-challenge:/acme-challenge
    environment:
        - SSL_ENABLED=${SSL_ENABLED}
        - SSL_HOST=${SSL_HOST}
        - SSL_EMAIL=${SSL_EMAIL}
    depends_on:
      - nginx

  # Rails mysql database
  mysql:
    container_name: chords_mysql
    image: mysql:5.7
    volumes:
      - mysql-data:/var/lib/mysql
      - mysql-log:/var/log/mysql
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=1
      - MYSQL_USER=chords_demo_user
      - MYSQL_PASSWORD=${CHORDS_ADMIN_PW}
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "5"
      
  # InfluxData influxdb time-series database
  influxdb:
    container_name: chords_influxdb
    image: influxdb:1.6
    volumes:
      - influxdb-data:/var/lib/influxdb
      - influxdb-log:/var/log/influxdb
      - /var/run/docker.sock:/var/run/docker.sock
      - shared-tmp:/tmp/
    environment:
      - INFLUXDB_HTTP_MAX_ROW_LIMIT=1000000
      - INFLUXDB_HTTP_AUTH_ENABLED=true
      - INFLUXDB_DATA_QUERY_LOG_ENABLED=false
      - INFLUXDB_REPORTING_DISABLED=true
      - INFLUXDB_USERNAME=admin
      - INFLUXDB_PASSWORD=${CHORDS_ADMIN_PW}      
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    ports:
      - 8086:8086
      - 8083:8083
      
  # InfluxData kapacitor time series monitoring
  kapacitor:
    container_name: chords_kapacitor
    image: earthcubechords/kapacitor
    volumes:
      - kapacitor-data:/var/lib/kapacitor
      - kapacitor-log:/var/log/kapacitor
    environment:
      # Custom environment variable, used by earthcubechords/kapacitor
      - KAPACITOR_ENABLED=${KAPACITOR_ENABLED}
      #
      - KAPACITOR_HOSTNAME=chords_kapacitor
      - KAPACITOR_LOGGING_LEVEL=INFO
      - KAPACITOR_REPORTING_ENABLED=false
      #
      - KAPACITOR_HTTP_AUTH_ENABLED=true
      #
      - KAPACITOR_INFLUXDB_0_URLS_0=http://chords_influxdb:8086
      - KAPACITOR_INFLUXDB_0_USERNAME=admin
      - KAPACITOR_INFLUXDB_0_PASSWORD=${CHORDS_ADMIN_PW}      
      #
      - KAPACITOR_SMTP_ENABLED=true
      - KAPACITOR_SMTP_FROM=${CHORDS_EMAIL_ADDRESS}
      - KAPACITOR_SMTP_HOST=${CHORDS_EMAIL_SERVER}
      - KAPACITOR_SMTP_PORT=${CHORDS_EMAIL_PORT}
      - KAPACITOR_SMTP_USERNAME=${CHORDS_EMAIL_ADDRESS}
      - KAPACITOR_SMTP_PASSWORD=${CHORDS_EMAIL_PASSWORD}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    ports:
      - 9092:9092
    links:
      - app
      
  # Grafana graphing server. It draws data from influxdb.
  grafana:
    container_name: chords_grafana
    image: earthcubechords/grafana:7.1.1
    # Note: GF_ variables are used by grafana, meaning that
    # you should not create your own variables beginning with GF_.
    environment:
      - GF_DEFAULT_INSTANCE_NAME=localhost.localdomain
      - GF_SERVER_HTTP_PORT=${GRAFANA_HTTP_PORT}
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PW}
      - GF_EMAILS_WELCOME_EMAIL_ON_SIGN_UP=true
      - GF_SMTP_ENABLED=true
      - GF_SMTP_FROM_ADDRESS=${CHORDS_EMAIL_ADDRESS}
      - GF_SMTP_FROM_NAME=CHORDS Grafana
      - GF_SMTP_HOST=${CHORDS_EMAIL_SERVER}:${CHORDS_EMAIL_PORT}
      - GF_SMTP_USER=${CHORDS_EMAIL_ADDRESS}
      - GF_SMTP_PASSWORD=${CHORDS_EMAIL_PASSWORD}   

      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://localhost:${GRAFANA_HTTP_PORT}/
      - GF_LOG_FILTERS=rendering:debug

    volumes:
      - grafana-data:/var/lib/grafana
      - grafana-log:/var/log/grafana
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    ports:
      - ${GRAFANA_HTTP_PORT:-3000}:${GRAFANA_HTTP_PORT:-3000}
    user: "104"
    links:
      - influxdb


  renderer:
    container_name: chords_renderer
    image: earthcubechords/grafana-image-renderer:latest
    # image: grafana/grafana-image-renderer:latest
    ports:
      - 8081    

volumes:
  # CHORDS Rails meta-data
  mysql-data: 
  # CHORDS time-series data
  influxdb-data:
  # kapacitor data
  kapacitor-data:
  # Grafana configuration data
  grafana-data:
  # shared /tmp volume, used for influxdb backup sharing
  # between app and influxdb services.
  shared-tmp:
  # log directories
  rails-log:
  nginx-log:
  mysql-log:
  influxdb-log:
  kapacitor-log:
  grafana-log:
  letsencrypt-log:
  # Volumes for letsencrypt configuration
  # and certificates. Certbot manages these directories;
  # nginx will access the certificates (in /etc/letsencrypt/live/).
  # The DH params are also stored here.
  letsencrypt-etc:
  letsencrypt-var-lib:
  acme-challenge:
