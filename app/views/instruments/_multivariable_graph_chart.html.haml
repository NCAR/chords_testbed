%script{type:'text/javascript', src: "https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.4.5/jquery-ui-timepicker-addon.js"}
%link{type: 'text/css', rel: "stylesheet", href: 'https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.4.5/jquery-ui-timepicker-addon.css'}



:javascript

  var live_updating_run_status = false;


:javascript
  //////////////////////////////////////////////////
  ////////// Initialization of Variables ///////////
  //////////////////////////////////////////////////

  // Increase the size of the Highcharts color pallete
  var new_colors = [
    '#FF0000',  '#00FF00',  '#0000FF',  '#FFFF00',  '#FF00FF',  
    '#00FFFF',  '#800000',  '#008000',  '#000080',  '#808000',  
    '#800080',  '#008080',  '#FFA500',  '#FF69B4',  '#DC143C',  
    '#FF6347',  '#00FF7F',  '#8B008B',  '#4B0082',  '#FFD700',  
    '#FF8C00',  '#A0522D',  '#9400D3',  '#00CED1',  '#FF1493',  
    '#00FA9A',  '#FF00FF',  '#ADFF2F',  '#FF4500',  '#8FBC8F']

  Highcharts.setOptions({
        colors: Highcharts.getOptions().colors.concat(new_colors)
  });

  // intialize series array that contain hashes corresponding to each variable
  var live_series = [];

  // intialize varaible to hold Highchart
  var live_chart;

  // initialize variable that holds last time of last recorded measurement for any variable

  // initialze array that holds time of last recorded measurement for each variable
  var live_last_times = [];

  // initialize variable that determines how often to fetch new data
  var live_refresh_msecs = #{@instrument.sample_rate_seconds} * 1000;

  // array that holds all variables of current instrument
  var variables = #{@variables.to_json.html_safe};

  // Craft a title for the charts
  var live_title = "#{@instrument.name.html_safe}" + " - Live Data";

  // array that holds y axis information
  var y_axis_js = [];

  // populate y_axis_js and live_series array
  var visible_by_default = true;
  var variable_index = 0;
  variables.forEach (function(v) {


    // Get the color to use for the variable
    // Make sure that the index of the color exists in the Highcharts configuration, 
    // and if we've run out of colors, loop them 
    var highcharts_color_index = variable_index % (Highcharts.getOptions().colors.length) ;
    
    var highcharts_color = Highcharts.getOptions().colors[highcharts_color_index].toString();

    var y_axis_js_part = '';
    y_axis_js_part += '{\n';
    y_axis_js_part += '  "labels": {\n';
    y_axis_js_part += '      "format": "{value} ' + $.trim(v.units) + '"' +  ',\n';
    y_axis_js_part += '       "style": { "color": "' + $.trim(highcharts_color) + '" }\n';
    y_axis_js_part += '  },\n';

    y_axis_js_part += '  "title": {\n ';
    y_axis_js_part += '   "text": "' + $.trim(v.name) + ' (' + $.trim(v.units) + ')",\n';
    y_axis_js_part += '   "style": { "color": "' + $.trim(highcharts_color) + '" }\n';
    y_axis_js_part += '  },\n';

    y_axis_js_part += '  "opposite": false,\n';
    y_axis_js_part += '  "showEmpty": false,\n';
    y_axis_js_part += '  "plotLines": [{\n';
    y_axis_js_part += '   "width": 0.5\n';
    y_axis_js_part += '  }]\n';

    y_axis_js_part += '}';

    y_axis_js.push(JSON.parse(y_axis_js_part));

    var temp_live_hash = {name: v.shortname, visible: visible_by_default, data: [], yAxis: variable_index, lineWidth: 1.3};

    live_series.push(temp_live_hash);

    live_last_times.push(0);

    variable_index += 1;
    visible_by_default = false;
  });

  ///////////////////////////////////////////////////////////////
  ////////// Functions for Data Requests and Plotting ///////////
  ///////////////////////////////////////////////////////////////

  // function that requests the data within start to end time range and plots data
  // if 'reset' is true, then data should replace current data
  // if 'endtime' is 0, then data retrieved from start to most recent data
  function requestAllLiveData(starttime, endtime, reset) {
    $.getJSON('/instruments/#{@instrument.id}/' + 'live' + '?start=' + starttime + '&end=' + endtime, function (data) {
      if (reset) {
        plotNewData(data);
      } else {
        addNewData(data);
      }
    });
  }

  // function that requests the data within start to end time range and plots data for specific variable
  // used for refreshing data after initial call
  // if 'endtime' is null, then data retrieved from start to most recent data
  function requestVarLiveData(starttime, endtime, currVar) {

    var request_string = '/instruments/#{@instrument.id}/live?var=' + currVar + '&start=' + starttime + '&end=' + endtime;

    $.getJSON(request_string, function (data) {
      addNewVarData(data, currVar);
    });
  }

  // function that clears current chart data and replots with new data
  function plotNewData(data) {
    // parse through data
    var display_points = data["display_points"];
    var multivariable_points = data["multivariable_points"];
    var multivariable_names = data["multivariable_names"];
    var live_refresh_msecs = data["refresh_msecs"];

    // loop through all variables
    for (i = 0; i < multivariable_names.length; i++) {
      // get data corresponding to current variable
      var points = multivariable_points[multivariable_names[i]];

      // clear current chart data for variable and load in new data
      live_chart.series[i].setData([]);
      live_chart.series[i].setData(points);

      // update last times array for current variable
      if (points.length > 0) {
        live_last_times[i] = points[points.length - 1][0];
      }
    }
    live_chart.redraw();
  }

  // function that adds new data points to current data in chart
  function addNewData(data) {
    // parse through data
    var display_points = data["display_points"];
    var multivariable_points = data["multivariable_points"];
    var multivariable_names = data["multivariable_names"];
    var live_refresh_msecs = data["refresh_msecs"];

    // loop through all variables
    for (i = 0; i < multivariable_names.length; i++) {
      // get data corresponding to current variable
      var points = multivariable_points[multivariable_names[i]];

      // loop through points
      for (p = 0; p < points.length; p++) {
        live_chart.series[i].addPoint(points[p], false);
      }

      // update last times array for current variable
      if (points.length > 0) {
        live_last_times[i] = points[points.length - 1][0];
      }
    }
    live_chart.redraw();
  }

  // function that adds new data points to current data in chart for specific variable
  function addNewVarData(data, currVar) {
    // parse through data
    var display_points = data["display_points"];
    var points = data["points"];

    // determine index of series corresponding to variable
    var series_index = 0;
    for (i = 0; i < variables.length; i++) {
      if (variables[i].shortname == currVar) {
        break;
      }
      series_index++;
    }

    // loop through points and add data
    for (p = 0; p < points.length; p++) {
      live_chart.series[series_index].addPoint(points[p], false);
    }
    live_chart.redraw();

    // update last times array for specific variable
    if (points.length > 0) {
      live_last_times[series_index] = points[points.length - 1][0];
    }
  }

  ////////////////////////////////////////////////////////////////
  ////////// Functions for Actions/Selections of Graph ///////////
  ////////////////////////////////////////////////////////////////

  // function that gets higher resolution data when user selects region to zoom in
  function zoomSelection(starttime, endtime) {
    // get higher resolution data and re plot chart
    requestAllLiveData(starttime, endtime, true);
  }

  // function that resets zoom back to range/resolution set when page initially rendered
  function resetZoom() {
    // get initial zoom min and max
    var max = #{@instrument.point_time_in_ms("last").to_time.to_i}
    var offset = parseInt(#{eval("#{@instrument.plot_offset_value}.#{@instrument.plot_offset_units}")});
    var min = max - offset;

    // reset date range selector
    document.getElementById('start').value = new Date(min * 1000).toISOString().slice(0, -1);
    document.getElementById('end').value = new Date(max * 1000).toISOString().slice(0, -1);

    // request downsampled data and plot
    requestAllLiveData(0, 0, true);
    live_chart.xAxis[0].setExtremes(min, max);
    live_chart.redraw();
  }

  function rangeSelection() {
    // get initial rendering min and max
    var initMin = live_chart.xAxis[0].getExtremes().min;
    var initMax = live_chart.xAxis[0].getExtremes().max;

    // get new inputted min and max
    var selectMin = document.getElementById('start').value;
    selectMin = (new Date(selectMin)).getTime();
    var selectMax = document.getElementById('end').value;
    selectMax = (new Date(selectMax)).getTime();

    // different scenarios
    if (initMin < selectMin && initMax > selectMax) {
      zoomSelection(selectMin, selectMax);
    } else if (initMax > selectMax) {
      requestAllLiveData(selectMin, initMax, false);
      live_chart.xAxis[0].setExtremes(selectMin, selectMax);
    } else if (initMin < selectMin) {
      requestAllLiveData(initMax, selectMax);
      live_chart.xAxis[0].setExtremes(selectMin, selectMax);
    } else if (initMin > selectMin && initMax < selectMax) {
      requestAllLiveData(selectMin, selectMax);
    }
  }

  ////////////////////////////////////////
  ////////// Rendering of Page ///////////
  ////////////////////////////////////////

  $(document).ready(function () {

    // adjust the global timezone offset
    Highcharts.setOptions({
      global: {
        timezoneOffset: #{@tz_offset_mins}
      }
    });

    // create live_chart
    live_chart = new Highcharts.stockChart({
      chart: {
        renderTo: 'instrument_live_chart',
        type: 'line',
        zoomType: 'x',
        events: {
          selection: function(event) {
            zoomSelection(event.xAxis[0].min, event.xAxis[0].max);
          }
        },
        animation: Highcharts.svg,
        marginRight: 10
      },
      rangeSelector: {
        buttons: [],
        inputBoxWidth: 180,
        enabled: true,
        inputEnabled: false,
        inputDateFormat: '%b %e, %Y %H:%M:%S',
        inputEditDateFormat: '%Y-%m-%d %H:%M:%S',
        inputDateParser: function (value) {
          [date, time] = value.split(/[\s]/);
          [year, month, day] = date.split(/[\-]/);
          [hours, minutes, seconds] = time.split(/[\:]/);

          ms =  Date.UTC(
                parseInt(year, 10),
                parseInt(month-1, 10),
                parseInt(day, 10),
                parseInt(hours, 10),
                parseInt(minutes, 10),
                parseInt(seconds, 10)
            );

          tz_offset_ms = #{@tz_offset_mins} * 60 * 1000;
          ms = ms + tz_offset_ms;

          return(ms);
        },
        allButtonsEnabled: false
      },
      credits: { enabled: false },
      title: { text: live_title },
      xAxis: {
        title: {
          text: '#{@tz_name.html_safe}'
        },
        type: 'datetime',
        tickPixelInterval: 150
      },
      yAxis: y_axis_js,
      tooltip: {
        split: true,
      },
      legend: { enabled: true },
      exporting: { enabled: false },
      series: live_series,
    });

    // make initial data request
    requestAllLiveData(0, 0, true);

    // refresh  data source for each variable






    function toggle_run_state(id, refresh_ms) {

      if (live_updating_run_status == false) {
        // set the run status to true
        eval("live_updating_run_status = true;");

        // set the indicator to on
        $('#toggle_live_updating').attr('src', chords.toggleOnSwitch);

        startLiveUpdate();


        // start a repeating measurement
        // repeat_measurement(id, refresh_ms);
      } else {
        // set the run status to false
        eval("live_updating_run_status = false;");

        // set the indicator to off
        $('#toggle_live_updating').attr('src', chords.toggleOffSwitch);
      }

    }






    // reset zoom button
    $('#resetZoom').click(function() {
      resetZoom();
    });

    // adjust range button
    $('#adjustRange').click(function() {
      rangeSelection();
    });

    var max = #{@instrument.point_time_in_ms("last").to_time.to_i}
    var offset = parseInt(#{eval("#{@instrument.plot_offset_value}.#{@instrument.plot_offset_units}")});
    var min = max - offset;
    document.getElementById('start').defaultValue = new Date(min * 1000).toISOString().slice(0, -1);
    document.getElementById('end').defaultValue = new Date(max * 1000).toISOString().slice(0, -1);
  });


